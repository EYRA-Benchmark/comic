# Generated by Django 2.2.5 on 2020-01-23 14:57

import comic.eyra.models
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Algorithm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Moment of creation')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Moment of last modification')),
                ('name', models.CharField(help_text='Name of algorithm', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, default='', help_text='Description of this solution in markdown')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), blank=True, help_text='Tags associated with this algorithm', size=None)),
                ('source_code_link', models.URLField(blank=True, help_text='Link to the source code', null=True)),
                ('paper_link', models.URLField(blank=True, help_text='Link to a paper or blog post', null=True)),
                ('admin_group', models.OneToOneField(blank=True, help_text='The admin group associated with this algorithm', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='algorithm', to='auth.Group')),
                ('creator', models.ForeignKey(help_text='Created by user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='algorithms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Moment of creation')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Moment of last modification')),
                ('short_description', models.TextField(default='', help_text='Short description in markdown')),
                ('description', models.TextField(default='', help_text='Description in markdown')),
                ('data_description', models.TextField(default='', help_text='Description of the data used in this benchmark in markdown')),
                ('truth_description', models.TextField(default='', help_text='Description of the truth data in markdown')),
                ('metrics_description', models.TextField(default='', help_text='Description of the metrics in markdown')),
                ('name', models.CharField(help_text='The name of the benchmark', max_length=255, unique=True)),
                ('banner_image', models.ImageField(blank=True, help_text='Banner image (wide image that shows in header of benchmark details page)', null=True, upload_to=comic.eyra.models.get_banner_image_filename)),
                ('card_image', models.ImageField(blank=True, help_text='Image to show in small card of this benchmark', null=True, upload_to=comic.eyra.models.get_card_image_filename)),
                ('evaluation_image', models.CharField(blank=True, help_text='Docker image to use for evaluation.', max_length=255, null=True)),
                ('admin_group', models.OneToOneField(blank=True, help_text='Admin group for this benchmark', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='benchmark', to='auth.Group')),
                ('creator', models.ForeignKey(help_text='Creator of the benchmark', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'benchmark',
                'verbose_name_plural': 'benchmarks',
            },
        ),
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Moment of creation')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Moment of last modification')),
                ('name', models.CharField(help_text='Name of this file', max_length=50)),
                ('file', models.FileField(blank=True, help_text='This files contents (the bits)', null=True, upload_to=comic.eyra.models.get_data_file_name)),
                ('sha', models.CharField(blank=True, help_text='Reserved for SHA checksum (currently not used)', max_length=40, null=True)),
                ('short_description', models.TextField(blank=True, default='', help_text='Short description of this file in plain text.', null=True)),
                ('long_description', models.TextField(blank=True, default='', help_text='Description of this file in markdown.', null=True)),
                ('size', models.BigIntegerField(blank=True, help_text='The size of this file in bytes', null=True)),
                ('creator', models.ForeignKey(blank=True, help_text='Creator of this DataFile', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Moment of creation')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Moment of last modification')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Queued'), (1, 'Started'), (2, 'Re-Queued'), (3, 'Failed'), (4, 'Succeeded'), (5, 'Cancelled')], default=0, help_text='Status of the job')),
                ('started', models.DateTimeField(blank=True, help_text='Moment job was started', null=True)),
                ('stopped', models.DateTimeField(blank=True, help_text='Moment job completed (success or fail)', null=True)),
                ('log', models.TextField(blank=True, help_text='Combined stderr/stdout of the job', null=True)),
                ('output', models.ForeignKey(help_text='Output of the job', on_delete=django.db.models.deletion.CASCADE, related_name='output_of_job', to='eyra.DataFile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('metrics', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('is_private', models.BooleanField(default=False, help_text='Submission for private leaderboard')),
                ('visualization_url', models.URLField(blank=True, help_text='Visualization URL', null=True)),
                ('image', models.CharField(help_text='Docker image (e.g. eyra/frb-eval:3)', max_length=64, unique=True)),
                ('command', models.CharField(blank=True, help_text='If specified, overrides default command as defined in Dockerfile', max_length=255, null=True)),
                ('version', models.CharField(blank=True, help_text='Version', max_length=64, null=True)),
                ('algorithm', models.ForeignKey(help_text='Implemented algorithm', on_delete=django.db.models.deletion.CASCADE, related_name='algorithm', to='eyra.Algorithm')),
                ('algorithm_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='eyra.Job')),
                ('benchmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eyra.Benchmark')),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to=settings.AUTH_USER_MODEL)),
                ('evaluation_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='eyra.Job')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JobInput',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Moment of creation')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Moment of last modification')),
                ('name', models.CharField(help_text='Name of algorithm', max_length=255, unique=True)),
                ('data_file', models.ForeignKey(help_text='Input DataFile', on_delete=django.db.models.deletion.CASCADE, related_name='job_inputs', to='eyra.DataFile')),
                ('job', models.ForeignKey(help_text='Job that this input is for', on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='eyra.Job')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='job',
            name='submission',
            field=models.ForeignKey(blank=True, help_text='Submission being run', null=True, on_delete=django.db.models.deletion.CASCADE, to='eyra.Submission'),
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID (primary key)', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Moment of creation')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Moment of last modification')),
                ('version', models.CharField(blank=True, help_text='The Dataset version', max_length=64, null=True)),
                ('name', models.CharField(help_text='The name of this dataset', max_length=255)),
                ('short_description', models.TextField(blank=True, default='', help_text='Short description of this data set in plaintext.', null=True)),
                ('long_description', models.TextField(blank=True, default='', help_text='Long description of this data set in markdown.', null=True)),
                ('card_image_url', models.CharField(default='https://www.staging.eyrabenchmark.net/static/media/logo.3fc4ddae.png', help_text='Image used in the DataSet card component', max_length=255)),
                ('card_image_alttext', models.CharField(blank=True, help_text='alt attribute for image in DataSet card component', max_length=255, null=True)),
                ('banner_image_url', models.CharField(default='https://www.staging.eyrabenchmark.net/static/media/logo.3fc4ddae.png', help_text='(wide) image used as a banner in DataSet detail page', max_length=255)),
                ('banner_image_alttext', models.CharField(blank=True, help_text='alt attribute for image in DataSet details header', max_length=255, null=True)),
                ('public_test_data_description', models.TextField(blank=True, default='', help_text='Description of the test data.', null=True)),
                ('public_test_data_sampling_method', models.TextField(blank=True, default='', help_text='Sampling method of the test data.', null=True)),
                ('private_test_data_description', models.TextField(blank=True, default='', help_text='Description of the test data.', null=True)),
                ('private_test_data_sampling_method', models.TextField(blank=True, default='', help_text='Sampling method of the test data.', null=True)),
                ('participant_data_description', models.TextField(blank=True, default='', help_text='Description of the data.', null=True)),
                ('participant_data_sampling_method', models.TextField(blank=True, default='', help_text='Sampling method of the data.', null=True)),
                ('creator', models.ForeignKey(blank=True, help_text='Creator of this DataSet', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_sets', to=settings.AUTH_USER_MODEL)),
                ('participant_data_files', models.ManyToManyField(blank=True, help_text='Other DataFiles downloadable by a participant.', related_name='data_sets', to='eyra.DataFile')),
                ('private_ground_truth_data_file', models.ForeignKey(blank=True, help_text="DataFile used as 'ground_truth' input in private evaluation container", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='eyra.DataFile')),
                ('private_test_data_file', models.ForeignKey(blank=True, help_text="DataFile used as 'test_data' input in private submission container", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='eyra.DataFile')),
                ('public_ground_truth_data_file', models.ForeignKey(blank=True, help_text="DataFile used as 'ground_truth' input in public evaluation container", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='eyra.DataFile')),
                ('public_test_data_file', models.ForeignKey(blank=True, help_text="DataFile used as 'test_data' input in public submission container", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='eyra.DataFile')),
                ('related_datasets', models.ManyToManyField(blank=True, help_text='Other DataSets related to this one', related_name='related_data_sets', to='eyra.DataSet')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='benchmark',
            name='data_set',
            field=models.ForeignKey(blank=True, help_text='Data set used in this benchmark', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='benchmarks', to='eyra.DataSet'),
        ),
    ]
